#!/bin/bash

#Fail this script should any operation fail
set -e
set -o pipefail

function enforce_root {
    if [ "$(whoami)" != "root" ];
    then
        echo "Please re-run this script as root (eg: 'sudo bash <script>')";
        exit;
    fi
}

function user_exists {
    if [ -n "$(getent passwd $1)" ];
    then
        return 0 #true
    fi
    return 1 #false
}

enforce_root;

read -p "Provide the user you would like to enable SSH for: " SSH_USER
if !(user_exists $SSH_USER)
then
	echo "This user does not exist."
	exit;
fi

read -p "Provide the email you use for github (to tag your generated public key): " GITHUB_KEY_EMAIL

read -s -p "Provide a password to protect your github key: " GITHUB_KEY_PASS
echo ""
read -s -p "Confirm your password: " GITHUB_KEY_PASS_CONFIRMATION
echo ""
if [ "$GITHUB_KEY_PASS" != "$GITHUB_KEY_PASS_CONFIRMATION" ]
then
    echo "Passwords did not macth."
    exit;
fi

echo "
See this tutorial on generating an SSH private-public key pair:
https://www.digitalocean.com/community/tutorials/how-to-create-ssh-keys-with-putty-to-connect-to-a-vps
"
read -p "Provide an SSH public key to authorize logins against: " SSH_PUBLIC_KEY

read -p "Type 'YES' (case sensitive) to begin: " AUTHORIZATION
if [ "$AUTHORIZATION" != "YES" ]
then
    exit;
fi

echo "Configuring SSH (overwriting any existing authorized_keys)"
# Installing openssh and backing up the default config,
# per the suggestions here: "https://help.ubuntu.com/community/SSH/OpenSSH/Configuring"
apt-get -y install openssh-server
cp /etc/ssh/sshd_config /etc/ssh/sshd_config.factory-defaults
chmod a-w /etc/ssh/sshd_config.factory-defaults
# Set the provided ssh public key as a login credential (Overwriting existing settings)
mkdir -p ~/.ssh
chmod 0700 ~/.ssh
echo $SSH_PUBLIC_KEY > ~/.ssh/authorized_keys
chmod 0644 ~/.ssh/authorized_keys
# Explicitly disable SSH password login using global regex substitution
sed -i "s|#*PasswordAuthentication yes|PasswordAuthentication no|g" /etc/ssh/sshd_config
sed -i "s|#*UsePAM yes|UsePAM no|g" /etc/ssh/sshd_config
if grep -q "AllowUsers" /etc/ssh/sshd_config;
then
    sed -i "s|AllowUsers.*|AllowUsers ${SSH_USER}|g" /etc/ssh/sshd_config
else
    echo "AllowUsers ${SSH_USER}" >> /etc/ssh/sshd_config
fi
# Rate limit connection attempts from a given IP address
ufw limit ssh
# Restart the SSH service so changes take effect
service ssh restart

echo "Installing apt packages and RVM"
apt-get update
# Add LTS nodejs 4.x to apt
curl -sL https://deb.nodesource.com/setup_4.x | bash -
# Install common dev tools
apt-get -y install curl git clang g++ nodejs postgresql screen
# Install RVM
gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
\curl -sSL https://get.rvm.io | bash -s stable
# Installing github pages dependencies
source /etc/profile.d/rvm.sh
rvm install 2.1.0
rvm use 2.1.0
rvm rubygems latest
gem install bundler

echo "Generating SSH key to use with github"
ssh-keygen -t rsa -b 4096 -C $GITHUB_KEY_EMAIL -N $GITHUB_KEY_PASS -f ~/.ssh/id_rsa
eval `ssh-agent -s`
ssh-add ~/.ssh/id_rsa

echo "Making a projects directory"
mkdir -p ~/projects

echo "Thats all!"
echo "Add the following SSH key to github:"
cat ~/.ssh/id_rsa.pub
